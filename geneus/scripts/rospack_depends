#!/usr/bin/env python 

import rospkg, os, sys
from rospkg.common import *
from rospkg.manifest import *

class RosPack(rospkg.RosPack):
    def _load_manifest(self, name):
        retval = self._manifests[name] = parse_manifest_file(self.get_path(name), self._manifest_name)
        return retval

def parse_manifest_file(dirpath, manifest_name):

    filename = os.path.join(dirpath, manifest_name)
    if not os.path.isfile(filename):
        # hack for backward compatibility
        package_filename = os.path.join(dirpath, PACKAGE_FILE)
        if not os.path.isfile(package_filename):
            raise IOError("Invalid/non-existent manifest file: %s" % filename)
        manifest = Manifest(filename=filename, is_catkin=True)

        # extract all information from package.xml
        from catkin_pkg.package import parse_package
        p = parse_package(package_filename)
        # put these into manifest
        manifest.description = p.description
        manifest.author = ', '.join([('Maintainer: %s' % str(m)) for m in p.maintainers] + [str(a) for a in p.authors])
        manifest.license = ', '.join(p.licenses)
        if p.urls:
            manifest.url = str(p.urls[0])
        manifest.version = p.version
        for export in p.exports:
            manifest.exports.append(Export(export.tagname, export.attributes, export.content))

        # use only ros dependencies
        try:
            from rosdep2.rospack import init_rospack_interface, is_ros_package, is_system_dependency, is_view_empty
            depends = set([])
            rosdeps = set([])
            for d in (p.buildtool_depends + p.build_depends + p.run_depends + p.test_depends):
#                if is_ros_package(_static_rosdep_view, d.name):
#                    depends.add(d.name)
#                if is_system_dependency(_static_rosdep_view, d.name):
#                    rosdeps.add(d.name)
                try:
                    rp.get_path(d.name)
                    depends.add(d.name)
                except rospkg.common.ResourceNotFound:
                    pass
            for name in depends:
                manifest.depends.append(Depend(name, 'package'))
            for name in rosdeps:
                manifest.rosdeps.append(RosDep(name))
        except ImportError:
            pass

        return manifest

    with open(filename, 'r') as f:
        return parse_manifest(manifest_name, f.read(), filename)

    pass

rp = RosPack()

if len(sys.argv) != 2:
    print sys.argv[0]+" [package]"
    sys.exit(1)

try:
    for p in rp.get_depends(sys.argv[1]):
        print p
except:
    ResourceNotFound



